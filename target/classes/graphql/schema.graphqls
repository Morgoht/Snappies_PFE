type Query {
    userById(userId:ID!):User
    allUsers:[User]

    allArticles:[Article]
    articleById(articleId:ID!):Article

    allDaycares:[Daycare]
    daycareById(daycareId:ID!):Daycare

    allOrders:[Order]
    orderById(orderId: ID!): Order

    allOrderLines: [OrderLine]
    orderLineById(orderLineId: ID!): OrderLine

    allDeliveryRounds: [DeliveryRound]
    deliveryRoundById(deliveryRoundId:ID!):DeliveryRound

    allDeliveries: [Delivery]
    deliveryById(deliveryId: ID!):Delivery
}
type Mutation {
    createUser(name: String!, lastname: String!, username: String!, email: String!, password: String!): User
    updateUser(name: String!, lastname: String!, username: String!, email: String!, password: String!): User
    deleteUser(userId: ID): String

    createArticle(article: ArticleInput): Article
    updateArticle(article: ArticleInput): Article
    deleteArticle(documentId: ID!): String

    createDaycare(daycare: DaycareInput): Daycare
    updateDaycare(daycare: DaycareInput): Daycare
    deleteDaycare(documentId: ID!): String

    createOrder(articles: [OrderLineInput], daycare: DaycareInput): Order
    updateOrder(articles: [OrderLineInput], daycare: DaycareInput): Order
    deleteOrder(documentId: ID!): String

    addOrderLine(documentId: ID!, orderInput: OrderLineInput!): OrderLine

    createOrderLine(article: ArticleInput!, quantity: Int!): OrderLine
    updateOrderLine(article: ArticleInput!, quantity: Int!): OrderLine
    deleteOrderLine(documentId: ID!): String

    createDelivery(order: OrderInput!, driver: UserInput!): Delivery
    updateDelivery(order: OrderInput!, driver: UserInput!): Delivery
    deleteDelivery(documentId: ID!): String

    createDeliveryRound(name: String, deliveries:[DeliveryInput]): DeliveryRound
    updateDeliveryRound(name: String, deliveries:[DeliveryInput],roundEnded: Boolean): DeliveryRound
    deleteDeliveryRound(documentId: ID!): String
    addDelivery(documentId: ID!, deliveryInput: DeliveryInput!): Delivery


}

