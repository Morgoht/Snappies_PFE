type Query {
    userById(userId:ID):User
    allUsers:[User]
    allArticles:[Article]
    articleById(articleId:ID):Article
    allDaycares:[Daycare]
    daycareById(daycareId:ID):Daycare
    allOrder:[Order]
    orderById: Order
    allOrderLine: [OrderLine]
    orderLineById: OrderLine
    allDeliveryRounds: [DeliveryRound]
}
type Mutation {
    createUser(name: String!, lastname: String!, username: String!, email: String!, password: String!): User
    updateUser(user: UserEditInput): User
    deleteUser(userId: ID): String
    createArticle(article: ArticleInput): Article
    updateArticle(article: ArticleEditInput): Article
    deleteArticle(documentId: ID!): String
    createDaycare(daycare: DaycareInput): Daycare
    updateDaycare(daycare: DaycareEditInput): Daycare
    deleteDaycare(documentId: ID!): String

    createOrder(order: OrderInput): Order
    updateOrder(articles: [OrderLineInput], daycare: DaycareInput): Order
    deleteOrder(documentId: ID!): String

    addOrderLine(documentId: ID!, orderInput: OrderLineInput!): OrderLine

    createOrderLine(article: ArticleInput!, quantity: Int!): OrderLine
    updateOrderLine(article: ArticleInput!, quantity: Int!): OrderLine
    deleteOrderLine(documentId: ID!): String
    createDelivery(order: OrderInput!, driver: UserInput!): Delivery
    updateDelivery(order: OrderInput!, driver: UserInput!): Delivery
    deleteDelivery(documentId: ID!): String

    createDeliveryRound(name: String, deliveries:[DeliveryInput]): DeliveryRound
    updateDeliveryRound(name: String, deliveries:[DeliveryInput],roundEnded: Boolean): DeliveryRound
    deleteDeliveryRound(documentId: ID!): String
    addDelivery(documentId: ID!, deliveryInput: DeliveryInput!): Delivery


}

